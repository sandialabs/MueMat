classdef TransPFactory < RFactory
    % Factory which builds restrictors by transposing prolongators
    properties (Access = private)
        Pfac_ = [];
    end

    methods
        function this = TransPFactory(Pfac)
            %TRANSPFACTORY
            %
            %   Pfac - optional PFactory that is used for generating the restrictor
            %          by transposing 'P' generated by Pfac
            %          if empty, the common variable 'P' is transposed for 'R'

            % Copy constructor
            if nargin == 1 && isa(Pfac, class(this)), this.Copy_(Pfac,[]); return; end
            %

            if varexist('Pfac'), this.Pfac_ = Pfac;
            else this.Pfac_ = []; end;

        end

        function SetNeeds(this, FineLevel, CoarseLevel)
            if isempty(this.Pfac_), CoarseLevel.Request('P');
            else CoarseLevel.Request('P',this.Pfac_); end;
        end

        function flag = Build(this, FineLevel, CoarseLevel, Specs)
            % Build CoarseLevel R via transpose of CoarseLevel P.
            % FIXME why are we returning true?
            flag = true;

            if isempty(this.Pfac_)
                P = CoarseLevel.Get('P');

                CoarseLevel.Set('R', P',this);

            else
                P = CoarseLevel.Get('P',this.Pfac_);
                CoarseLevel.Set('R', P',this);
                CoarseLevel.Release('P',this.Pfac_);
            end
        end


    end

    methods (Access = protected)

        function Copy_(this, src, mc)
            %COPY_
            %
            %   SYNTAX   obj.Copy_(src, mc);
            %
            %     src - Object to copy
            %     mc  - MATLAB Metaclass
            [cmd, data, mc] = this.CopyCmd_(src,mc);
            eval(cmd);
        end

    end % methods

end
