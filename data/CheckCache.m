% Check if matrices in data/Elas*.mat are consistent with what is generated by
% BuildElasticity

% This script must be run from directory data/

function CheckCache()

% regenerate matrices in /tmp
MtxGenerator(2, 50, 1);
MtxGenerator(3, 5:5:45, 1);

% diff
% 2D
makediff('Elas2D-50x50.mat', '/tmp/Elas2D-50x50.mat');

% 3D
for n = 5:5:45
    nstr = num2str(n);
    sizestr = [nstr 'x' nstr 'x' nstr];      
    filename = ['Elas3D-' sizestr '.mat'];
    makediff(filename, ['/tmp/' filename]);
end % for

end

% Compare 2 .mat files generated by ElasticityTest
function makediff(file1, file2)

data1 = load(file1);
data2 = load(file2);

DIFF.Amat = data1.Amat-data2.Amat;
DIFF.nullspace=data1.nullspace-data2.nullspace;
DIFF.coords=data1.coords - data2.coords;

if (nnz(DIFF.Amat) == 0 && nnz(DIFF.nullspace) == 0 && nnz(DIFF.coords) == 0)
    fprintf('No differences were found between %s and %s\n', file1, file2);
else
    fprintf('Matrices %s and %s differ\n', file1, file2);
    keyboard
end

end

% Gen matrix
% TODO: code factorization with ElasticityTest...
function MtxGenerator(dim, NLIST, stretch)

if ~varexist('dim'),     dim = 2; fprintf('DIM = default = %d\n', dim); end
if dim ~= 2 && dim ~= 3, fprintf('Invalid dimension\n'); keyboard; end

%% Init environment
srand;
SetHomeDir
mue_include

%% Set test case parameters
% Parameters for 304 Stainless Steel
STEEL_MODULUS = 193e9;
POISSONS_RATIO = .305;

for I = 1:length(NLIST)
    n = NLIST(I);
    nstr = num2str(n);
    sstr = num2str(stretch);
    dimstr = num2str(dim);
    
    % 100% Steel
    ELASTIC_MODULUS = STEEL_MODULUS;
    
    if dim == 2, sizestr = [nstr 'x' nstr]; else sizestr = [nstr 'x' nstr 'x' nstr]; end
       
    % Build matrix, block it and grab parameters
    filename = ['/tmp/Elas' dimstr 'D-' sizestr];
    if(stretch ~= 1) filename = [filename '.s.' sstr ];end
    filename = [filename '.mat'];
    
    fid = fopen(filename, 'r');
    fprintf('Generating matrix (%s)', filename);
    if dim == 2
         stretchvec = [stretch 1];
        [Amat, nullspace, coords] = BuildElasticity2D(n, ELASTIC_MODULUS, POISSONS_RATIO, stretchvec, 'plane stress');
    else % dim == 3
        stretchvec = [stretch 1 1];
        [Amat, nullspace, coords] = BuildElasticity3D(n, ELASTIC_MODULUS, POISSONS_RATIO, stretchvec);
    end
    Amat = Amat.GetMatrixData();
    save(filename, 'Amat', 'nullspace', 'coords');
    
    fprintf('... done\n');
end % for

end